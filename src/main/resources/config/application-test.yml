# ===================================================================
# Spring Boot configuration.
#
# This configuration will be overridden by the Spring profile you use
# For example: application-dev.yml if you use the "dev" profile.
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# https://docs.spring.io/spring-boot/reference/features/profiles.html
# ===================================================================

logging:
  level:
    root: debug
    com.dct.model: debug
    com.dct.config: debug
    org.springframework.security: debug
  charset:
    console: UTF-8
    file: UTF-8
  file:
    path: opt/logs

spring:
  application:
    name: starter-config
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/ars_user?serverTimezone=UTC
    username: admin
    password: 123456
    hikari:
      poolName: Hikari
      # AllowPoolSuspension means pause connection when there is a problem
      # When the setting is false, the system will not allow to pause connections in pool
      # Helping to maintain continuous system operation even when there is a problem
      allow-pool-suspension: false
      auto-commit: false # Do not automatically commit transactions
      maximumPoolSize: 30 # Maximum database connections
      minimumIdle: 3 # At least connections will be kept idle, ready for use
      maxLifetime: 1200000 # Maximum time (20 minutes) that a connection can exist in the pool before being closed and recreated
      idleTimeout: 180000 # Maximum time (3 minutes) that a connection can be idle before being closed
      connectionTimeout: 200000 # Maximum time (3 minutes 20s) to wait for connection from pool when no connection is available
      leak-detection-threshold: 200000 # If a connection is not returned to the pool after 3 minutes 20s, it will be detected as a "leak"
      data-source-properties:
        cachePrepStmts: true # Enable caching to improve performance when using multiple identical statements
        prepStmtCacheSize: 100 # Prepared statement cache size. In this case, the cache can hold up to 100 statements
        prepStmtCacheSqlLimit: 1024 # Limits the maximum length (in bytes) of an SQL statement that can be cached
        useServerPrepStmts: true # Enable server-side prepared statements instead of client-side prepared statements
  sql:
    init:
      mode: never
  jpa:
    # Avoid causing LazyInitializationException if querying outside the scope of EntityManager or causing poor performance
    open-in-view: false
    hibernate:
      # Hibernate only checks if the current schema matches the entity
      # If it does not match, the application will not start
      # Do not make any changes to the schema
      ddl-auto: validate
    properties:
      hibernate:
        show_sql: true
        format_sql: false
        jdbc:
          time_zone: UTC
          ddl-auto: validate
  jackson:
    time-zone: UTC
  servlet:
    multipart:
      enabled: true
      # Maximum size of the entire HTTP request when uploading multipart data (including files and other parameters)
      max-request-size: 30MB
      # Maximum size for each file that a user can upload
      max-file-size: 10MB

server:
  servlet:
    session:
      cookie:
        # The session cookie that Spring Boot creates will have the HttpOnly attribute
        # Setting HttpOnly helps protect cookies from Cross-Site Scripting (XSS) attacks
        # Cookies will still be sent with each HTTP request (and can therefore be used for session authentication)
        # But Cookies cannot be accessed from the client side using JavaScript (e.g. via document.cookie)
        http-only: true
  port: 8880

app:
  domain: http://localhost:${server.port}
  datasource: enabled
  jpa-auditing: enabled

  security:
    enabled-tls: disabled
    password-encrypt-factor: 12
    authentication-type: header_forwarded
    jwt:
      access-token:
        base64-secret-key: ZGN0LWJhc2Utc2VjcmV0LWtleS10b2tlbi12YWxpZGl0eS04N
        validity: 300000 # 5 minutes
      refresh-token:
        base64-secret-key: ZGN0LWJhc2Utc2VjcmV0LWtleS10b2tlbi12YWxpZGl0eS04NjQwMDAwMG1zLWZvci1yZW1lbWJl
        validity: 3600000 # 1 hour
        validity-for-remember: 604800000 # 7 days
    oauth2:
      activate: enabled
      base-authorize-uri: /api/p/v1/users/oauth2/authorize # Add /{registrationId} (eg: /google) when calling from clients
      clients:
        - provider: google
          client-name: Demo Starter Google
          client-id: ${GOOGLE_CLIENT_ID}
          client-secret: ${GOOGLE_CLIENT_SECRET}
          scope:
            - https://www.googleapis.com/auth/userinfo.email
            - https://www.googleapis.com/auth/userinfo.profile
          authorization-uri: https://accounts.google.com/o/oauth2/auth
          redirect-uri: /login/oauth2/code/google
          token-uri: https://oauth2.googleapis.com/token
          user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
          username-attribute-name: sub

        - provider: facebook
          client-name: Demo Starter Facebook
          client-id: ${FACEBOOK_CLIENT_ID}
          client-secret: ${FACEBOOK_CLIENT_SECRET}
          scope:
            - email
            - public_profile
          authorization-uri: https://www.facebook.com/v13.0/dialog/oauth
          redirect-uri: /login/oauth2/code/facebook
          token-uri: https://graph.facebook.com/v13.0/oauth/access_token
          user-info-uri: https://graph.facebook.com/me?fields=id,name,email
          username-attribute-name: id
    public-request-patterns:
      - /api/p/**
      - /actuator/**

  http-client:
    rest-template: enabled
    default-connect-timeout: 5000 # 5s
    default-read-timeout: 5000    # 5s
    circuit-breaker:
      activate: enabled
      slowCallDurationThreshold: 2  # If request call > 2s → considered slow
      slowCallRateThreshold: 75     # If ≥75% of calls are delayed → open circuit
      slidingWindowSize: 5          # Use a sliding window of size 5 most recent calls to calculate the error
      minimumNumberOfCalls: 3       # Only start evaluating errors after at least 3 requests
      # When circuit breaker opens → after timeout → switches to half-open state, allowing 3 retry requests for testing
      permittedNumberOfCallsInHalfOpenState: 3
      waitDurationInOpenState: 10   # When circuit is open, wait 10s before allowing retry
      # After waitDurationInOpenState, automatically switch from open to half-open (no new request required)
      automaticTransitionFromOpenToHalfOpenEnabled: true
      failureRateThreshold: 50      # If error rate > 50% in slidingWindowSize → open circuit (disconnect)
      connect-timeout: 5000         # Overwrite `default-connect-timeout` value when Circuit Breaker is enabled
      read-timeout: 5000            # Overwrite `default-read-timeout` value when Circuit Breaker is enabled

      retry:
        activate: enabled
        retryMaxAttempts: 3
        retryWaitDuration: 1000

      time-limiter:
        activate: enabled
        cancel-running-future: true
        overall-timeout: 10000

  i18n:
    base-names:
      - classpath:i18n/messages
      - classpath:i18n/base_messages
    encoding: UTF-8

  resources:
    activate: enabled
    static-resource:
      patterns:
        - /**.html
        - /**.js
        - /**.css
        - /**.webp
        - /**.jpg
        - /**.jpeg
        - /**.gif
        - /**.svg
        - /**.png
        - /**.ico
        - /uploads/**
        - /file/**
        - /i18n/**
      locations:
        - classpath:/static/
    upload-resource:
      patterns:
        - /uploads/
      locations:
        - opt/uploads/

  interceptors:
    activate: disabled
    chain:
      - name: com.dct.config.interceptor.DefaultBaseResponseFilter
        included-patterns:
          - /api/**
          - /api/p/**
        excluded-patterns:
          - /file/**
          - /static/**

      - name: com.dct.config.interceptor.DefaultFeignAuthenticationRequestFilter
        included-patterns:
          - /api/**
        excluded-patterns:
          - /api/p/**

  cors:
    activate: disabled
    patterns:
      '[/api/**]':
        allowedOrigins:
          - "http://localhost:4200"
          - "http://localhost:8080"
        allowedMethods:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
        allowedHeaders:
          - Content-Type
          - Authorization
          - Accept
          - Origin
          - X-CSRF-Token
          - X-Requested-With
          - Access-Control-Allow-Origin
          - X-App-Version
          - X-Device-ID
        allowCredentials: true
        maxAge: 3600  # Cache preflight response in 1 hour
      '[/ws/**]':
        allowedOrigins: "*"
        allowedMethods:
          - GET
          - OPTIONS
        allowedHeaders: "*"
        allowCredentials: false
        maxAge: 1800

  redis:
    activate: enabled
    auto-reconnect: true
    command-timeout: 500
    connection-timeout: 1600
    host: localhost
    port: 6792
    username: redis
    password: root
    database: 0
    shutdown-timeout: 100
    ttl-minutes: 5

  socket:
    activate: enabled
    endpoints:
      - "/ws"
      - "/wss"
    application-prefixes:
      - "/api/ws"
    broker-prefixes:
      - "/api/topic"

  rabbitmq:
    activate: enabled
    servers: armadillo.rmq.cloudamqp.com
    port: 5672
    username: dyaakrsb
    virtual-host: dyaakrsb
    password: ${RABBIT_MQ_PASSWORD}
    exchange:
      direct: amq.direct
    consumer:
      concurrent-consumer: 9
      max-concurrent-consumer: 7
      prefetch-count: 2
    producer:
      reply-timeout: 10000
    queues:
      notification:
        name: ars.notification
        routing-key: ars.notification.key
      bill-complete:
        name: ars.bill.complete
        routing-key: ars.bill.complete.key
